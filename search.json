[{"path":"https://mpadge.github.io/typetracer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Filip Krikava. Author.            Author original 'injectr' code package builds; https://github.com/PRL-PRG/injectr covr authors. Copyright holder.            Original authors sections code 'covr' package included modified form.","code":""},{"path":"https://mpadge.github.io/typetracer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M, Krikava F (2022). typetracer: Trace Function Parameter Types. https://github.com/mpadge/typetracer, https://mpadge.github.io/typetracer/.","code":"@Manual{,   title = {typetracer: Trace Function Parameter Types},   author = {Mark Padgham and Filip Krikava},   year = {2022},   note = {https://github.com/mpadge/typetracer, https://mpadge.github.io/typetracer/}, }"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"typetracer","dir":"","previous_headings":"","what":"Trace Function Parameter Types","title":"Trace Function Parameter Types","text":"typetracer R package trace function parameter types. R language includes set defined types, language “absurdly dynamic”[1], lacks way specify types expected expression. typetracer package enables code traced extract detailed information properties parameters passed R functions. typetracer can trace individual functions entire packages, demonstrated .","code":""},{"path":"https://mpadge.github.io/typetracer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Trace Function Parameter Types","text":"package can installed following command: loaded use calling library:","code":"remotes::install_github (\"mpadge/typetracer\") library (typetracer)"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"example-1---a-single-function","dir":"","previous_headings":"","what":"Example #1 - A Single Function","title":"Trace Function Parameter Types","text":"typetracer works “injecting” tracing code body function using inject_tracer() function. Locally-defined functions can traced simply passing functions directly inject_tracer(). following example includes four parameters, including ... allow passing additional entirely arbitrary parameter types values. injecting typetracer code, calls function, f, “trace” parameter function, capturing unevaluated evaluated representations point function first called. values can accessed load_traces function, returns data.frame object (tibble format) one row parameter function call. row result returned load_traces() represents one parameter passed one function call. function call represents single “trace” enumerated trace_number column, also uniquely identified arbitrary function call hash (fn_call_hash). remaining columns trace data define properties parameter, p, : par_name: Name parameter. class: List classes parameter. typeof: Result typeof(p). mode: Result mode(p). storage_mode: Result storage.mode(p). length: Result length(p). formal: Result formals(f)[[\"p\"]], named list item default value specified. uneval: Parameters passed function call prior evaluation within function environment. eval: Evaluated version parameter. results show parameters function, f(), successfully traced, including additional parameters, , b, f, passed part ... argument. additional parameters can identified \"formal\" entry NULL, indicating part formal arguments function. result can also used demonstrate difference unevaluated evaluated forms parameters: Unevaluated parameters generally converted equivalent character expressions. typeof, mode, storage_mode columns similar, yet may hold distinct information certain types parameters. conditions values differ complex, depend among things version R . typeof alone generally provide sufficient information, although list differences may provide insight whether columns may provide useful additional information. Traces saved temporary directory current R session, load_traces() function simply loads traces created session. function clear_traces() removes traces, load_traces() load new traces produced time.","code":"f <- function (x, y, z, ...) {     x * x + y * y } inject_tracer (f) val <- f (     x = 1:2,     y = 3:4 + 0.,     a = \"blah\",     b = list (a = 1, b = \"b\"),     f = a ~ b ) x <- load_traces () x  ## # A tibble: 7 × 12 ##   trace_number fn_name fn_call_hash par_name class     typeof mode  storage_mode ##          <int> <chr>   <chr>        <chr>    <I<list>> <chr>  <chr> <chr>        ## 1            0 f       vctWwGBq     x        <chr [1]> integ… nume… integer      ## 2            0 f       vctWwGBq     y        <chr [1]> double nume… double       ## 3            0 f       vctWwGBq     z        <chr [1]> NULL   NULL  NULL         ## 4            0 f       vctWwGBq     ...      <chr [1]> NULL   NULL  NULL         ## 5            0 f       vctWwGBq     a        <chr [1]> chara… char… character    ## 6            0 f       vctWwGBq     b        <chr [1]> list   list  list         ## 7            0 f       vctWwGBq     f        <chr [1]> langu… call  language     ## # … with 4 more variables: length <int>, formal <named list>, uneval <I<list>>, ## #   eval <I<list>> x$uneval [x$par_name %in% c (\"b\", \"f\")]  ## $b ## [1] \"list(a = 1, b = \\\"b\\\")\" ##  ## $f ## [1] \"a ~ b\"  x$eval [x$par_name %in% c (\"b\", \"f\")]  ## $b ## $b$a ## [1] 1 ##  ## $b$b ## [1] \"b\" ##  ##  ## $f ## a ~ b ## <environment: 0x5573513b9c38>"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"uninjecting-traces","dir":"","previous_headings":"Example #1 - A Single Function","what":"Uninjecting Traces","title":"Trace Function Parameter Types","text":"important applying inject_tracer() function restore functions back original form calling obverse uninject_tracer() function. function, r, , simply requires, typetracer modifies internal code functions defined within current R session, strongly recommend restarting R session using typetracer, ensure expected function behaviour restored.","code":"uninject_tracer (f)  ## [1] TRUE"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"example-2---tracing-a-package","dir":"","previous_headings":"","what":"Example #2 - Tracing a Package","title":"Trace Function Parameter Types","text":"section presents complex example tracing function calls rematch package, chosen less code almost package CRAN. following single line traces function calls examples nominated package. trace_package() function automatically injects tracing code every function within package, need explicitly call inject_tracer() function. data.frame returned trace_package() function includes one column result directly returned load_traces(). column called “source”, identifies source-code object generated trace: Tracing installed package generally extracts traces example code, documented help, .Rd, files. identified “rd_” prefix source call, rematch package including one one .Rd file. trace_package() function also includes additional parameter, types, defaults c (\"examples\", \"tests\"), traces also default generated tests included local source packages (packages installed include test files). “source” column test files identifies names test, prefixed “test_”. column, results shown load_traces(), one line every parameter passed every function call examples.","code":"res <- trace_package (\"rematch\") res  ## # A tibble: 8 × 13 ##   trace_number fn_name  fn_call_hash par_name class    typeof mode  storage_mode ##          <int> <chr>    <chr>        <chr>    <I<list> <chr>  <chr> <chr>        ## 1            0 re_match DiqLVcuE     pattern  <chr>    chara… char… character    ## 2            0 re_match DiqLVcuE     text     <chr>    chara… char… character    ## 3            0 re_match DiqLVcuE     perl     <chr>    logic… logi… logical      ## 4            0 re_match DiqLVcuE     ...      <chr>    NULL   NULL  NULL         ## 5            1 re_match WkdGznuw     pattern  <chr>    chara… char… character    ## 6            1 re_match WkdGznuw     text     <chr>    chara… char… character    ## 7            1 re_match WkdGznuw     perl     <chr>    logic… logi… logical      ## 8            1 re_match WkdGznuw     ...      <chr>    NULL   NULL  NULL         ## # … with 5 more variables: length <int>, formal <named list>, uneval <I<list>>, ## #   eval <I<list>>, source <chr> unique (res$source)  ## [1] \"rd_re_match\""},{"path":"https://mpadge.github.io/typetracer/index.html","id":"example-2a---specifying-functions-to-trace","dir":"","previous_headings":"Example #2 - Tracing a Package","what":"Example #2(a) - Specifying Functions to Trace","title":"Trace Function Parameter Types","text":"trace_package() function also accepts argument, functions, specifying functions package traced. example,","code":"x <- trace_package (\"stats\", functions = \"sd\")  ## # A tibble: 2 × 13 ##   trace_number fn_name fn_call_hash par_name class     typeof mode  storage_mode ##          <int> <chr>   <chr>        <chr>    <I<list>> <chr>  <chr> <chr>        ## 1            0 sd      EzasZOKV     x        <chr [1]> integ… nume… integer      ## 2            0 sd      EzasZOKV     na.rm    <chr [1]> logic… logi… logical      ## # … with 5 more variables: length <int>, formal <I<list>>, uneval <I<list>>, ## #   eval <I<list>>, source <chr>"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"prior-art","dir":"","previous_headings":"","what":"Prior Art","title":"Trace Function Parameter Types","text":"package extends concepts previously developed R packages, notably including: typed package @moodymudskipper contractr package @aviralg & @fikovnik Plus work explained detail footnote: [1] Alexi Turcotte & Jan Vitek (2019), Towards Type System R, ICOOOLPS ’19: Proceedings 14th Workshop Implementation, Compilation, Optimization Object-Oriented Languages, Programs Systems. Article . 4, Pages 1–5, https://doi.org/10.1145/3340670.3342426","code":""},{"path":"https://mpadge.github.io/typetracer/reference/clear_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear previous traces — clear_traces","title":"Clear previous traces — clear_traces","text":"Traces default appended previous traces. function can used clean previous ones, enable subsequent calls generate new traces appended previous ones.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/clear_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear previous traces — clear_traces","text":"","code":"clear_traces()"},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject parameter tracer into one function — inject_tracer","title":"Inject parameter tracer into one function — inject_tracer","text":"Inject parameter tracer one function","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject parameter tracer into one function — inject_tracer","text":"","code":"inject_tracer(f)"},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject parameter tracer into one function — inject_tracer","text":"f function (, object class \"function\", character string).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject parameter tracer into one function — inject_tracer","text":"Nothing (error fail).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inject parameter tracer into one function — inject_tracer","text":"tracer defined internal get_types function. uses options variable defined package load current tempdir, defining single location traced values dumped. done via options allow multi-threaded function calls calls via callr traced.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Load traces of parameter types — load_traces","title":"Load traces of parameter types — load_traces","text":"Load traces parameter types","code":""},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load traces of parameter types — load_traces","text":"","code":"load_traces(files = FALSE, quiet = FALSE)"},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load traces of parameter types — load_traces","text":"files TRUE, return paths temporary files holding trace data. quiet FALSE, issue message traces found.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace all parameters for all functions in a specified package — trace_package","title":"Trace all parameters for all functions in a specified package — trace_package","text":"Trace parameters functions specified package","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace all parameters for all functions in a specified package — trace_package","text":"","code":"trace_package(   package = NULL,   functions = NULL,   types = c(\"examples\", \"tests\"),   pkg_dir = NULL )"},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace all parameters for all functions in a specified package — trace_package","text":"package Name package traced (character value) functions Optional character vector names functions trace. Defaults tracing functions. types types code run generate traces: one values \"examples\" \"tests\" (tools::testInstalledPackage). pkg_dir \"types\" including \"tests\", local directory source code package. (needed installed versions generally include tests.)","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace all parameters for all functions in a specified package — trace_package","text":"data.frame data every parameter every function specified code provided package examples.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove parameter tracer from one function — uninject_tracer","title":"Remove parameter tracer from one function — uninject_tracer","text":"function removes traces previous injected functions inject_tracer function.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove parameter tracer from one function — uninject_tracer","text":"","code":"uninject_tracer(f)"},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove parameter tracer from one function — uninject_tracer","text":"f function (, object class \"function\", character string).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove parameter tracer from one function — uninject_tracer","text":"Logical value indicating whether tracer able removed (\"uninjected\").","code":""}]
