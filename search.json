[{"path":"https://mpadge.github.io/typetracer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Padgham. Author, maintainer. Filip Krikava. Author.            Author original 'injectr' code package builds; https://github.com/PRL-PRG/injectr covr authors. Copyright holder.            Original authors sections code 'covr' package included modified form.","code":""},{"path":"https://mpadge.github.io/typetracer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padgham M, Krikava F (2022). typetracer: Trace Function Parameter Types. https://github.com/mpadge/typetracer, https://mpadge.github.io/typetracer/.","code":"@Manual{,   title = {typetracer: Trace Function Parameter Types},   author = {Mark Padgham and Filip Krikava},   year = {2022},   note = {https://github.com/mpadge/typetracer, https://mpadge.github.io/typetracer/}, }"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"typetracer","dir":"","previous_headings":"","what":"Trace Function Parameter Types","title":"Trace Function Parameter Types","text":"typetracer R package trace function parameter types. main usage typetracer identify parameters used input R functions. Many computer languages formal type systems, meaning types parameters must formally declared encoded. R different, offers way specify expected types input parameters. typetracer identifies types parameters passed R functions. package can trace individual functions entire packages, demonstrated .","code":""},{"path":"https://mpadge.github.io/typetracer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Trace Function Parameter Types","text":"package can installed following command: loaded use calling library:","code":"remotes::install_github (\"mpadge/typetracer\") library (typetracer)"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"example-1---a-single-function","dir":"","previous_headings":"","what":"Example #1 - A Single Function","title":"Trace Function Parameter Types","text":"typetracer works “injecting” tracing code body function using inject_tracer() function. following function includes four parameters, including ... allow passing additional entirely arbitrary parameter types values. injecting typetracer code, calls function, f, “trace” parameter function, capturing unevaluated evaluated representation point function first called. values can accessed load_traces function, returns data.frame object (tibble format one row parameter function call. results shows parameters function, f(), successfully traced, including additional parameters, b, passed part ... argument. additional parameters can identified \"formal\" entry NULL, indicating part formal arguments function. Traces saved temporary directory current R session, load_traces() function simply loads traces created session. function clear_traces() removes traces, load_traces() load new traces produced time.","code":"f <- function (x, y, z, ...) {     x * x + y * y } inject_tracer (f) val <- f (x = 1:2, y = 3:4 + 0., a = \"blah\", b = list (a = 1, b = \"b\")) x <- load_traces () x  ## # A tibble: 6 × 9 ##   fn_name fn_call_hash par_name class     storage_mode length formal      uneval ##   <chr>   <chr>        <chr>    <I<list>> <chr>         <int> <named lis> <I<li> ## 1 f       Ml7VmU5d     x        <chr [1]> integer           2 <missing>   <chr>  ## 2 f       Ml7VmU5d     y        <chr [1]> double            2 <missing>   <chr>  ## 3 f       Ml7VmU5d     z        <chr [1]> NULL              0 <missing>   <chr>  ## 4 f       Ml7VmU5d     ...      <chr [1]> NULL              0 <missing>   <chr>  ## 5 f       Ml7VmU5d     a        <chr [1]> character         1 <NULL>      <chr>  ## 6 f       Ml7VmU5d     b        <chr [1]> list              2 <NULL>      <chr>  ## # … with 1 more variable: eval <I<list>> x$uneval [x$par_name %in% c (\"a\", \"b\")]  ## $a ## [1] \"blah\" ##  ## $b ## [1] \"list(a = 1, b = \\\"b\\\")\"  x$eval [x$par_name %in% c (\"a\", \"b\")]  ## $a ## [1] \"blah\" ##  ## $b ## $b$a ## [1] 1 ##  ## $b$b ## [1] \"b\""},{"path":"https://mpadge.github.io/typetracer/index.html","id":"uninjecting-traces","dir":"","previous_headings":"Example #1 - A Single Function","what":"Uninjecting Traces","title":"Trace Function Parameter Types","text":"important applying inject_tracer() function restore functions back original form calling obverse uninject_tracer() function. function, r, , simply requires,","code":"uninject_tracer (f)  ## [1] TRUE"},{"path":"https://mpadge.github.io/typetracer/index.html","id":"example-2---tracing-a-package","dir":"","previous_headings":"","what":"Example #2 - Tracing a Package","title":"Trace Function Parameter Types","text":"section presents complex example tracing function calls rematch package, chosen less code almost package CRAN. following single line traces function calls examples nominated package. trace_package() function automatically injects tracing code every function within package, need explicitly call inject_tracer() function. result contains one line every parameter passed every function call examples. trace_package() function also includes additional parameter, types, defaults c (\"examples\", \"tests\"), traces also default generated tests included local source packages. final two columns result hold unevaluated evaluated representations parameter. first two values demonstrate difference: example first assigns variable isodaten first evaluated values, calls function pattern = isodaten. second constructs vector called dates second evaluated values, calls function test = dates.","code":"res <- trace_package (\"rematch\") res  ## # A tibble: 8 × 9 ##   fn_name  fn_call_hash par_name class     storage_mode length formal     uneval ##   <chr>    <chr>        <chr>    <I<list>> <chr>         <int> <named li> <I<li> ## 1 re_match va9TgViI     pattern  <chr [1]> character         1 <missing>  <chr>  ## 2 re_match va9TgViI     text     <chr [1]> character         7 <missing>  <chr>  ## 3 re_match va9TgViI     perl     <chr [1]> logical           1 <lgl [1]>  <chr>  ## 4 re_match va9TgViI     ...      <chr [1]> NULL              0 <missing>  <chr>  ## 5 re_match i3B9C8Yz     pattern  <chr [1]> character         1 <missing>  <chr>  ## 6 re_match i3B9C8Yz     text     <chr [1]> character         7 <missing>  <chr>  ## 7 re_match i3B9C8Yz     perl     <chr [1]> logical           1 <lgl [1]>  <chr>  ## 8 re_match i3B9C8Yz     ...      <chr [1]> NULL              0 <missing>  <chr>  ## # … with 1 more variable: eval <I<list>> res$uneval [1:2]  ## $pattern ## [1] \"isodaten\" ##  ## $text ## [1] \"dates\"  res$eval [1:2]  ## $pattern ## [1] \"(?<year>[0-9]{4})-(?<month>[0-1][0-9])-(?<day>[0-3][0-9])\" ##  ## $text ## [1] \"2016-04-20\"       \"1977-08-08\"       \"not a date\"       \"2016\"             ## [5] \"76-03-02\"         \"2012-06-30\"       \"2015-01-21 19:58\""},{"path":"https://mpadge.github.io/typetracer/index.html","id":"examples-3---non-standard-evaluation","dir":"","previous_headings":"","what":"Examples #3 - Non-standard Evaluation","title":"Trace Function Parameter Types","text":"example briefly illustrates examples tracing parameters evaluated non-standard ways. first examples demonstrates parameter values captured initial point function entry. parameter x evaluated point function entry y + 1 , value y = 2:3, gives expected evaluated result x = 3:4, function ultimately returns expected values (10 * 2:3) + 1, 21 31, first line y <- 10 * y evaluated prior substituting value passed x y + 1. second example specifies default value x = y + 1, actual call passing value, thus \"NULL\" unevaluated version, evaluated versions remain identical. traces produced typetracer also include column, formal, contains default values specified definition eval_x_late_standard(): three columns formal, uneval, eval thus contain definitions parameters passed function environment, three possible states : Formal default values (definition, unevaluated state); unevaluated state specified parameters; equivalent versions evaluated within function environmental.","code":"eval_x_late_NSE <- function (x, y) {     y <- 10 * y     eval (substitute (x)) } inject_tracer (eval_x_late_NSE) eval_x_late_NSE (y + 1, 2:3)  ## [1] 21 31  res <- load_traces () res$par_name  ## [1] \"x\" \"y\"  res$uneval  ## $x ## [1] \"y + 1\" ##  ## $y ## [1] \"2:3\"  res$eval  ## $x ## [1] 3 4 ##  ## $y ## [1] 2 3 clear_traces () # clear all preceding traces eval_x_late_standard <- function (x = y + 1, y, z = y ~ x) {     y <- 10 * y     x } inject_tracer (eval_x_late_standard) eval_x_late_standard (, 2:3)  ## [1] 3 4  res <- load_traces () res$par_name  ## [1] \"x\" \"y\" \"z\"  res$uneval  ## $x ## [1] \"NULL\" ##  ## $y ## [1] \"2:3\" ##  ## $z ## [1] \"NULL\"  res$eval  ## $x ## [1] 3 4 ##  ## $y ## [1] 2 3 ##  ## $z ## y ~ x ## <environment: 0x5565b3ee8e70> res$formal  ## $x ## y + 1 ##  ## $y ##  ##  ## $z ## y ~ x"},{"path":"https://mpadge.github.io/typetracer/reference/clear_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear previous traces — clear_traces","title":"Clear previous traces — clear_traces","text":"Traces default appended previous traces. function can used clean previous ones, enable subsequent calls generate new traces appended previous ones.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/clear_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear previous traces — clear_traces","text":"","code":"clear_traces()"},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":null,"dir":"Reference","previous_headings":"","what":"Inject parameter tracer into one function — inject_tracer","title":"Inject parameter tracer into one function — inject_tracer","text":"Inject parameter tracer one function","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inject parameter tracer into one function — inject_tracer","text":"","code":"inject_tracer(f)"},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inject parameter tracer into one function — inject_tracer","text":"f function (, object class \"function\", character string).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inject parameter tracer into one function — inject_tracer","text":"Nothing (error fail).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/inject_tracer.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Inject parameter tracer into one function — inject_tracer","text":"tracer defined internal get_types function. uses options variable defined package load current tempdir, defining single location traced values dumped. done via options allow multi-threaded function calls calls via callr traced.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Load traces of parameter types — load_traces","title":"Load traces of parameter types — load_traces","text":"Load traces parameter types","code":""},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load traces of parameter types — load_traces","text":"","code":"load_traces(quiet = FALSE)"},{"path":"https://mpadge.github.io/typetracer/reference/load_traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load traces of parameter types — load_traces","text":"quiet FALSE, issue message traces found.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace all parameters for all functions in a specified package — trace_package","title":"Trace all parameters for all functions in a specified package — trace_package","text":"Trace parameters functions specified package","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace all parameters for all functions in a specified package — trace_package","text":"","code":"trace_package(package = NULL, types = c(\"examples\", \"tests\"), pkg_dir = NULL)"},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace all parameters for all functions in a specified package — trace_package","text":"package Name package traced (character value) types types code run generate traces: one values \"examples\" \"tests\" (tools::testInstalledPackage). pkg_dir \"types\" including \"tests\", local directory source code package. (needed installed versions generally include tests.)","code":""},{"path":"https://mpadge.github.io/typetracer/reference/trace_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace all parameters for all functions in a specified package — trace_package","text":"data.frame data every parameter every function specified code provided package examples.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove parameter tracer from one function — uninject_tracer","title":"Remove parameter tracer from one function — uninject_tracer","text":"function removes traces previous injected functions inject_tracer function.","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove parameter tracer from one function — uninject_tracer","text":"","code":"uninject_tracer(f)"},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove parameter tracer from one function — uninject_tracer","text":"f function (, object class \"function\", character string).","code":""},{"path":"https://mpadge.github.io/typetracer/reference/uninject_tracer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove parameter tracer from one function — uninject_tracer","text":"Logical value indicating whether tracer able removed (\"uninjected\").","code":""}]
